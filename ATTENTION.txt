*	Загружаем через терминал GitBash node.js
*	Загружаем через терминал GitBash npm
*	Загружаем через терминал GitBash Vue CLI
*	Создаем проект VueJS в терминале GitBash командой vue create [название папки/проекта]
*	npm install vuex@next --save - 
Vuex — паттерн управления состоянием + библиотека для приложений на Vue.js. Он служит централизованным хранилищем данных для всех компонентов приложения с правилами, гарантирующими, что состояние может быть изменено только предсказуемым образом. Vuex интегрируется с официальным расширением vue-devtools (opens new window), предоставляя «из коробки» такие продвинутые возможности, как «машину времени» для отладки и экспорт/импорт слепков состояния данных.
*	npm install axios - Неоднократно при создании веб-приложения вам может понадобиться получать и отображать данные из API. Существует несколько способов сделать это, но наиболее популярным решением является использование axios, основанного на Promise HTTP-клиента.
*	npm install sass - устанавливаем Sass (ВНИМАНИЕ!!! Устанавливается один раз в каком-либо из проектов. Необходимо проверить наличие установки и тогда просто прописать строку в package.json, например:
"sass": "^1.35.1", "sass-loader": "^12.1.0"). Ljk;yf ,должна быть указана последняя версия.
*	npm install sass-loader (ВНИМАНИЕ!!! См. комментарий выше для sass)
*	npm i json-server - устанавливаем JSON Server для создания фейкового API (ВНИМАНИЕ!! Установлено глобально)
ВНИМАНИЕ!!! Необходимо активировать json-server командой "json-server --watch db.json".
После выполнения этой команды будет создан файл db.json с базовыми данными, а в терминале появится информация типа:
	http://localhost:3000/posts
	http://localhost:3000/comments
	http://localhost:3000/profile
Данная команда необходимо, чтобы json-server, создав файл db.json следил за изменением его состояния, и в любой момент мог выдать информацию после ввода сочетания клавиш: Type s + enter at any time to create a snapshot of the database
Файл db.json можно использовать, как полноценное API.
*	В файле package. в разделе "eslintConfig": {} имеется свойство "rules", в котором необходимо указать следующую запись, которая предотвратит подчеркивание выражения console.log(); красной чертой:
	"eslintConfig": {
		"rules": {
		"no-console": "off"
	 }
	}

-------------------------------------------------------------------------------------------------------------------------------------
СБОРКА НА БАЗЕ VUE.JS И NODE.JS ГОТОВА И МОЖНО ЕЕ ЗАПУСКАТЬ

*	Запуск осуществляется командой для development режима serve (см. файл package.json).
Для режима production - build, и для режима отладки кода - lint.
*	После сборки проекта будет указан адрес localhost (например 8080) на котором открывается проект в GoLive режиме.
-------------------------------------------------------------------------------------------------------------------------------------
ПРОЕКТ УСТАНОВЛЕН И ЗАПУЩЕН
-------------------------------------------------------------------------------------------------------------------------------------
ПРОДУМЫВАНИЕ СТРУКТУРЫ ПРИЛОЖЕНИЯ

*	Так как мы создаем интернет магазин, то у нас будет три основных компонента:
	а). каталог;
	б). карточка товара - единичный экземпляр каталога, - возможно, в виде модального окна;
	в). корзина;
*	Создаем файлы в папке components.
Компоненты необходимо называть согласно логики, которой он должен соответствовать по содержанию.
Например, у нас будут компоненты Каталог и Корзина, - это значит что файл компонента надо называть соответственно: catalogItem и cart.
Для компонентов, в правилах хорошего тона, необходимо указывать какой-либо префикс. который символизирует ваше приложение.
Это может быть либо название компании, либо название проекта...
В нашем случае будем использовать индекс-приставку перед названием компонента "v-".
*	Компонент VueJS состоит из:
	- <template></template> - это тэг, сооответствующий полностью тэгу <template></template> HTML.
	Тэг <templater> - это механизм для отложенного создания клиентского контента, который не отображается во время загрузки, но может быть инициализирован при помощи JavaScript.
	Шаблон можно представить себе как фрагмент контента, сохранённый для последующего использования в документе. Хотя парсер и обрабатывает содержимое элемента <template> во время загрузки страницы, он делает это только чтобы убедиться в валидности содержимого; само содержимое при этом не отображается.
	Внутри тэга <template> всегда должен быть один корневой элемент(div). По правилам хорошего тона название класса корневого элемента в компоненте должно соответствовать названию этого компонента.

	- <script></script> - в данном тэге сразу необходимо экспортировать (export) его состояние default (написать: export default {}). 
	В теге <script> в export default {} должен быть обязательный компонент "name:" с указанием имени, аналогичного названию компонента "v-main-wrapper".
	
	- <style></style> - для написания стилей элементов, находящихся в файле компонента.
	В тэге <style> можно указать атрибут scoped (<style scoped></style>), чтобы Vuen следил за отсутствием задвоенности стилей во всех компонентах проекта. Таким образом обеспечивается инкапсуляция. 
	При наличии данного атрибута Vue добавляет для каждого стиля дополнительный уникальный эелмент data, чтобы исключить повторения. Такой способ увеличивает вес приложения. Данный атрибут необходимо использовать в зависимости от обстоятельств.

*	В компоненте могут быть дети. Запись дочерних компонентов имеет следующий вид:
	components: {
			components1,  (пишется наименование компонента без кавычек)
			components2
			}
*	В компоненте есть data() {return} - данный компонент всегда должен что-то возвращать через return. Это персональные данные компонента.
*	В компоненте есть props: {} - это НЕ персональные данные компонента. Сюда будет приходить в компонент данные из родителя.
*	Чтобы файл компонента был виден в браузере он должен быть отображен дополнительно. См. далее.
*	В компоненте может быть раздел computed: {} - это раздел вычисляемых свойства компонента.
*	В компоненте может быть раздел methods: {} - это раздел, содержащий клики, открытия модальных окон, показ элементов, запуски анисации и т.д. Этот раздел непосредственно отлавливает действия пользователя.
*	В компоненте может быть раздел watch: {} - это раздел позволяющий следить за изменением чего-либо в компоненте (чего угодно), и, в случае отлавливания какого-либо изменения, производить какие-либо действия.
*	В компоненте могут быть хуки жизненного цикла, определяющие этапы разработки с указанием перечня действий на каждом этапе жизненного цикла. 
Основные хуки жизненного цикла:
 - mounted() {} - отрабатывается, когда компонент полностью загрузится.
-----------------------------------------------------------------------------------------------------------------------------------
Чтобы разместить компонент, его необходимо поместить в основной файл приложения App.vue.
Для этого
а). в тэге <script> пишем:
import vMainWrapper from './components/v-main-wrapper.vue' //Указывается v-main-wrapper без пробелов кэмелкейс
б). в export default пишем:
	export default {
  		components: {
    		vMainWrapper,
  		}
	}
в). в <template> создаем отдельный тэг <v-main-wrapper></v-main-wrapper>. Этот тэг может быть самозакрывающимся <v-main-wrapper />. 

*	Создаем файлы в папке components:
	- v-catalog,
	- v-catalog-item,
	- v-cart. 
*	Импортируем файлы v-catalog и v-cart в файл v-main-wrapper.
* 	Импортируем файл v-catalog-item в файл v-catalog.

*	Создаем файл vue.config.js и прописываем import стилей scss.
*	В файл main.js сделали импорт файла import './assets/styles/styles.css'.
*	В файле variables.scss создали переменные.
*	В файл styles.scss сделали импорт @import 'variables.scss'; - который содержит переменные каскадной таблицы стилей.
Также на основании файлов styles.scss и пр. создается папка с файлами сss в корне сайта, которые необходимо удалить.

*	Чтобы создать ссылку на источник фото в виде конкатинации строк необходимо написать:
<img :src="require('../img/' + product_data.image)" /> т.е. указать основной путь до папки с файлом в виде строки и затем прибавить свойство продукта из массива продуктов, которое содержит название файла с фото. ВНИМАНИЕ!!! "require" обязательно т.к. фото не будут загружаться.
*	Для создания своего API запускаем json-server, чтобы он нашел и следил за файлом db.json, в котором находятся данные объектов, командой:
json-server --watch db.json.
*	По правилам хорошего тона во Vuex.Store в разделах state, mutations, actions, getters методы пишутся с большой буквы.

